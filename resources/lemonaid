#!/usr/bin/env bash

#
#
#  Lemonaid (i.e, the chroot side of the install)
#
#  Executing this script manually will result in bizzare behavior.
#  Don't do it.
#
#
#
#
#

source /etc/lemon/lemon.conf
source /etc/lemon/resources/lemonlib
source /tmp/info.lemon

# Readies pacman (adds multilib if enabled, initializes keyring, and syncs).
function PREP {
  if [ $MULTILIB == 1 ]; then
    ctext cyan std "Enabling multilib and syncing pacman..."
    echo "[multilib]" >> /etc/pacman.conf
    echo "Include = /etc/pacman.d/mirrorlist" >> /etc/pacman.conf
  else
    ctext cyan std "Syncing pacman..."
  fi
  pacman-key --init
  pacman-key --populate archlinux
  if ! pacman -Sy; then
    ctext red std "Failed to sync pacman on install target! Check your internet settings, then restart lemon"
    exit 1
  fi
}

# Ensures we have a working editor
if [ $EDITOR == vi ]; then
  EDITOR="vim"
fi
if ! which $EDITOR &> /dev/null; then
  ctext cyan std "Fetching $EDITOR..."
  if ! pacman -S --needed --noconfirm $EDITOR; then
    ctext magenta std "Error: failed to install $EDITOR!"
    ctext magenta std "Defaulting on vim for editor."
    echo "Failed to fetch $EDITOR using pacman. Defaulting on vim for this installation." >> /tmp/lemonaid.log
    EDITOR="vim"
    if ! pacman -S --needed --noconfirm vim; then
      ctext magenta std "Failed to fetch vim!"
      ctext magenta std "Editor will be disabled for this installation."
      echo "Failed to fetch vim! Editor will be disabled for this installation." >> /tmp/lemonaid.log
      EDITOR="cat"
    fi
  fi
fi

# Main installation procedure. Installs packages from packagelist and enables services from servicelist.
# Failed operations are logged in /tmp/lemonaid.log.
function MAIN {
  if [ $PACKAGELIST == 1 ]; then
    PACMANERRORS="0"
    PKGS=$(cat /etc/lemon/lists/packagelist*)
    for i in $PKGS; do
      if ! pacman -S --needed --noconfirm $i; then
        echo "Failed package: $i" >> /tmp/lemonaid.log
        if [ $RETRYASAUR == 1 ] && [ $AURPACKAGELIST == 1 ]; then
          echo "Package will be retried as Arch User Repository package." >> /tmp/lemonaid.log
          echo "$i" >> /etc/lemon/lists/aurpackagelistfailed
        fi
        PACMANERRORS="1"
      fi
    done
    if [ $PACMANERRORS == 1 ]; then
      ctext magenta std "Packagelist installation complete, but errors were detected."
      ctext magenta std "Offending packages are listed in /tmp/lemonaid.log"
    fi
  fi
  if [ $SERVICELIST == 1 ]; then
    SERVICEERRORS="0"
    SERVICES=$(cat /etc/lemon/lists/servicelist*)
    for i in $SERVICES; do
      if ! systemctl enable $i; then
        echo "Failed service: $i" >> /tmp/lemonaid.log
        SERVICEERRORS="1"
      fi
    done
    if [ $SERVICEERRORS == 1 ]; then
      ctext magenta std "Servicelist complete, but some services failed to enable properly."
      ctext magenta std "Offending services are listed in /tmp/lemonaid.log"
    fi
  fi
  if ls -a /etc/lemon/lists/aurpackagelist* &> /dev/null; then
    APLPRES="1"
  else
    APLPRES="0"
  fi
  if [ ! $APLPRES == 1 ]; then
    ctext magenta std "Error: AUR is enabled, but no aurpackagelist found!"
    echo "AUR package installation skipped: No aurpackagelist found!" >> /tmp/lemonaid.log
  fi
  if [ $AURPACKAGELIST == 1 ] && [ $APLPRES == 1 ]; then
    pacman -S --noconfirm base-devel git &> /dev/null
    chmod 755 /etc/lemon/resources/aurhandler
    useradd aur
    mkdir /home/aur
    cp /etc/skel/.bash* /home/aur/
    chown -R aur:aur /home/aur
    cp /etc/sudoers /etc/sudoers.bak
    echo "aur ALL=(ALL) NOPASSWD: ALL" >> /etc/sudoers
    echo 'PATH=/etc/lemon/resources:/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin:$PATH;
          AURPACKAGES=$(cat /etc/lemon/lists/aurpackagelist*);
          source /etc/lemon/resources/lemonlib;
          aurhandler -S ${AURPACKAGES[@]};
          if isyes "$(ctext cyan nnl "Install Aurtool? (for AUR package management post-install) (Y/n)")"; then
            PKGQUERYFAILED="0";
            if ! which package-query &> /dev/null; then
              aurhandler -S package-query;
              if ! which package-query &> /dev/null; then
                ctext magenta std "Failed to install aurtool: package-query failed! (aurtool dependency)";
                echo "Aurtool failed: package-query failed to install" >> /home/aur/aur.log;
                PKGQUERYFAILED="1";
              fi;
            fi;
            if [ ! $PKGQUERYFAILED == 1 ]; then
              cd $HOME;
              if ! git clone http://github.com/m1ndflay3r/aurtool; then
                ctext magenta std "Failed to fetch aurtool!";
                echo "Aurtool failed: Failed to fetch from repository" >> /home/aur/aur.log;
              else
                sudo mv aurtool/aurtool /bin/;
                sudo chmod 755 /bin/aurtool;
              fi;
            fi;
          fi;
          exit
         ' >> /home/aur/.bashrc
    su aur
    rm -rf /etc/sudoers
    mv /etc/sudoers.bak /etc/sudoers
    if ls -a /home/aur/aur.log &> /dev/null; then
      cat /home/aur/aur.log >> /tmp/lemonaid.log
    fi
    rm -rf /home/aur
    userdel aur
    if cat /tmp/lemonaid.log | grep AUR &> /dev/null; then
      ctext magenta std "Aurpackagelist installation complete, but errors were detected."
      ctext magenta std "Offending AUR packages are listed in /tmp/lemonaid.log"
    fi
  fi
}

# Boot configuration.
# Installs / configures both grub and refind depending on flags in lemon.conf.
function BOOT {
  if [ $GRUB == 1 ]; then
    ctext cyan std "Installing grub..."
    sleep 0.5
    ln -s /hostlvm /run/lvm
    pacman -S --needed --noconfirm grub freetype2 fuse2 dosfstools os-prober mtools libisoburn
    if [ $BOOTMODE == 0 ]; then
      pacman -S --needed --noconfirm efibootmgr
      if ! grub-install --target=x86_64-efi --efi-directory=/boot/efi --bootloader-id=GRUB; then
        echo "Grub install failed! (EFI)" >> /tmp/lemonaid.log
      else
        if ! grub-mkconfig -o /boot/grub/grub.cfg; then
          echo "Grub installed successfully, but creation of grub.cfg failed!" >> /tmp/lemonaid.log
        fi
      fi
    fi
    if [ $BOOTMODE == 1 ]; then
      if ! grub-install --target=i386-pc "$GRUBDRIVE"; then
        echo "Grub install failed! (BIOS)" >> /tmp/lemonaid.log
      else
        if ! grub-mkconfig -o /boot/grub/grub.cfg; then
          echo "Grub installed successfully, but creation of grub.cfg failed!" >> /tmp/lemonaid.log
        fi
      fi
    fi
  else
    ctext cyan std "Proceeding without grub."
    ln -s /hostlvm /run/lvm
  fi
  if [ $REFIND == 1 ] && [ $BOOTMODE == 0 ]; then
    if ! pacman -S --needed --noconfirm refind; then
      echo "Failed to fetch refind!" >> /tmp/lemonaid.log
    fi
    if ! refind-install; then
      echo "Refind install failed!" >> /tmp/lemonaid.log
    fi
  else
    ctext cyan std "Proceeding without rEFInd"
  fi
}

# Configuration of the new system.
# Includes things like hostname, user creation, etc
function CONF {
  yes="1"
  while [ ! "$yes" == 0 ]; do
    unset CITY
    cd /usr/share/zoneinfo
    ctext blue
    ls -a
    ctext reset
    read -p "$(ctext cyan nnl "Enter your region: ")" REGION
    if [ -z "$REGION" ]; then
      REGION="NULL"
    fi
    if ! cd $REGION; then
      until cd $REGION; do
        ctext magenta std "Invalid region!"
        read -p "$(ctext cyan nnl "Enter your region: ")" REGION
        if [ -z "$REGION" ]; then
          REGION="NULL"
        fi
      done
    fi
    cd $REGION &> /dev/null
    ctext blue
    ls -a
    ctext reset
    read -p "$(ctext cyan nnl "Enter your city: ")" CITY
    if [ -z "$CITY" ]; then
      CITY="NULL"
    fi
    if ! ls -a /usr/share/zoneinfo/$REGION/$CITY &> /dev/null; then
      until ls -a /usr/share/zoneinfo/$REGION/$CITY &> /dev/null; do
        ctext magenta std "Error: $(ctext red)$CITY $(ctext magenta)does not exist in filesystem!"
        read -p "$(ctext cyan nnl "Enter your city: ")" CITY
        if [ -z "$CITY" ]; then
          CITY="NULL"
        fi
      done
    fi
    isyes "$(ctext cyan nnl "You have entered $(ctext green)$REGION $(ctext cyan)and $(ctext green)$CITY $(ctext cyan)- is this correct? (Y/n)")"
  done
  ln -sf /usr/share/zoneinfo/$REGION/$CITY /etc/localtime
  hwclock --systohc
  yes="1"
  ctext green std "                                         -Locale Setup-"
  ctext green std "                                         --------------"
  echo " "
  ctext cyan std "Use the search function to find any needed locales (eg: search en_US to find any locales fitting that term)"
  ctext cyan std "After searching for a locale, you'll be presented with a menu to choose which found locales to add."
  ctext cyan std "After you're finished adding any needed locales, type 'done' from the search menu to continue."
  ctext green std "-----------------------------------------------------------------------------------------------------------"
  until false; do
    IFS=$'\r\n' GLOBIGNORE='*' command eval 'INITIALREAD=($(cat /etc/locale.gen))'
    COUNT="0"
    for i in "${INITIALREAD[@]}"; do
      COUNT=$((COUNT + 1))
      if [ $COUNT -ge 24 ]; then
        CLEANEDREAD+=("$i")
      fi
    done
    RESPONSE="NULL"
    until [ $RESPONSE == done ]; do
      echo " "
      read -p "$(ctext cyan nnl "Enter locale search query (or type 'done' to finish locale setup): ")" RESPONSE
      if [ -z "$RESPONSE" ]; then
        RESPONSE="NULL"
      fi
      echo " "
      if [ ! $RESPONSE == done ]; then
        COUNT="0"
        unset RESULTARRAYNUM
        unset RESULTARRAYNONUM
        for i in "${CLEANEDREAD[@]}"; do
          if echo "$i" | grep $RESPONSE &> /dev/null; then
            COUNT=$((COUNT + 1))
            ctext green
            echo -n "$COUNT) "
            echo "$i" | grep -Po '^.{1}\K.*'
            ctext reset
            RESULTARRAYNUM+=("$COUNT   $i")
            RESULTARRAYNONUM+=("$i")
          fi
        done
        dRESPONSE="NULL"
        until [ $dRESPONSE == back ]; do
          echo " "
          read -p "$(ctext cyan nnl "Enter locale to commit (or type 'back' to return to search): ")" dRESPONSE
          if [ -z "$dRESPONSE" ]; then
            dRESPONSE="NULL"
          fi
          if [[ ! $dRESPONSE =~ ^-?[0-9]+$ ]] && [ ! $dRESPONSE == back ]; then
            dRESPONSE="999999999"
          fi
          if [ ! $dRESPONSE == back ] && [ ! $dRESPONSE -le $COUNT ]; then
            until [ $dRESPONSE == back ] || [ $dRESPONSE -le $COUNT ]; do
              ctext magenta std "Invalid response!"
              echo " "
              read -p "$(ctext cyan nnl "Enter locale to commit (or type 'back' to return to search): ")" dRESPONSE
              if [ -z "$dRESPONSE" ]; then
                dRESPONSE="NULL"
              fi
              if [[ ! $dRESPONSE =~ ^-?[0-9]+$ ]] && [ ! $dRESPONSE == back ]; then
                dRESPONSE="999999999"
              fi
            done
          fi
          if [ ! $dRESPONSE == back ]; then
            ALREADYMATCHED="0"
            for i in "${RESULTARRAYNUM[@]}"; do
              unset MATCHVAR
              MATCHVAR=$(echo "$i" | head -c 4)
              if echo "$MATCHVAR" | grep $dRESPONSE &> /dev/null; then
                if [ ! $ALREADYMATCHED == 1 ]; then
                  for F in "${RESULTARRAYNONUM[@]}"; do
                    if echo "$i" | grep "$F" &> /dev/null; then
                      echo "$F" | grep -Po '^.{1}\K.*' >> /tmp/locales.lemon
                      STATVAR=$(echo "$F" | grep -Po '^.{1}\K.*')
                      ctext green nnl "$STATVAR:"
                      ctext green std " success"
                      unset STATVAR
                    fi
                  done
                  ALREADYMATCHED="1"
                fi
              fi
            done
          fi
        done
      fi
    done
    echo -e "\e[4m$(ctext green)-Locale Summary-$(ctext reset)\e[0m"
    ctext green
    cat /tmp/locales.lemon
    ctext reset
    echo " "
    if ! isyes "$(ctext cyan nnl "Generate above locales? (Y/n)")"; then
      rm -rf /tmp/locales.lemon
      unset RESULTARRAYNUM
      unset RESULTARRAYNONUM
      unset INITIALREAD
      unset CLEANEDREAD
    else
      locale-gen
      break
    fi
  done
  echo " "
  cat /tmp/locales.lemon >> /etc/locale.gen
  IFS=$'\r\n' GLOBIGNORE='*' command eval 'SETREAD=($(cat /tmp/locales.lemon))'
  COUNT="0"
  for i in "${SETREAD[@]}"; do
    COUNT=$((COUNT + 1))
    ctext green
    echo -n "$COUNT) "
    echo "$i" | cut -d' ' -f1
    ctext reset
    dRESULTARRAYNUM+=("$COUNT   $i")
    dRESULTARRAYNONUM+=("$i")
  done
  RESPONSE="NULL"
  MCBREAKY="0"
  until false; do
    if [ $MCBREAKY == 1 ]; then
      break
    fi
    echo " "
    read -p "$(ctext cyan nnl "Choose default locale: ")" RESPONSE
    if [ -z "$RESPONSE" ]; then
      RESPONSE="NULL"
    fi
    if [[ ! $RESPONSE =~ ^-?[0-9]+$ ]] && [ ! $RESPONSE == back ]; then
      RESPONSE="999999999"
    fi
    if [ ! $RESPONSE == back ] && [ ! $RESPONSE -le $COUNT ]; then
      until [ $RESPONSE == back ] || [ $RESPONSE -le $COUNT ]; do
        ctext magenta std "Invalid response!"
        echo " "
        read -p "$(ctext cyan nnl "Choose default locale: ")" RESPONSE
        if [ -z "$RESPONSE" ]; then
          RESPONSE="NULL"
        fi
        if [[ ! $RESPONSE =~ ^-?[0-9]+$ ]] && [ ! $RESPONSE == back ]; then
          RESPONSE="999999999"
        fi
      done
    fi
    dALREADYMATCHED="0"
    for x in "${dRESULTARRAYNUM[@]}"; do
      unset dMATCHVAR
      dMATCHVAR=$(echo "$x" | head -c 4)
      if echo "$dMATCHVAR" | grep $RESPONSE &> /dev/null; then
        if [ ! $dALREADYMATCHED == 1 ]; then
          for Z in "${dRESULTARRAYNONUM[@]}"; do
            if echo "$x" | grep "$Z" &> /dev/null; then
              unset DIALOGUEVAR
              DIALOGUEVAR=$(echo "$Z" | cut -d' ' -f1)
              if isyes "$(ctext cyan nnl "Use $(ctext green)$DIALOGUEVAR $(ctext cyan)as default locale? (Y/n)")"; then
                echo "LANG=$DIALOGUEVAR" > /etc/locale.conf
                MCBREAKY="1"
              fi
            fi
          done
          dALREADYMATCHED="1"
        fi
      fi
    done
  done
  yes="1"
  while [ ! "$yes" == 0 ]; do
    unset HOSTNAME
    read -p "$(ctext cyan nnl "Please enter a name for the system (hostname): ")" HOSTNAME
    if [ -z "$HOSTNAME" ]; then
      HOSTNAME="NULL"
    fi
    isyes "$(ctext cyan nnl "You have entered $(ctext green)$HOSTNAME$(ctext cyan). Is this correct? (Y/n)")"
  done
  echo $HOSTNAME > /etc/hostname
  echo "127.0.0.1     localhost" >> /etc/hosts
  echo "::1           localhost" >> /etc/hosts
  echo "127.0.1.1     $HOSTNAME.localdomain $HOSTNAME" >> /etc/hosts
  if [ $ROOT == 1 ] || [ $NONROOTUSER == 0 ] || [ $SUDO == 0 ]; then
    ctext cyan std "Enter new root password"
    until passwd root; do
      ctext cyan std "Enter new root password"
    done
    cp -r /etc/skel/.bash* /root/
    echo "PATH=/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin:$PATH" >> /root/.bashrc
    if which nano &> /dev/null; then
      echo "include /usr/share/nano/*.nanorc" > /root/.nanorc
    fi
  fi
  if [ $NONROOTUSER == 1 ] || [ $ROOT == 0 ]; then
    yes="1"
    while [ ! "$yes" == 0 ]; do
      unset USER
      read -p "$(ctext cyan nnl "Enter non-root username: ")" USER
      if [ -z "$USER" ]; then
        USER="NULL"
      fi
      isyes "$(ctext cyan nnl "You have entered $(ctext green)$USER $(ctext cyan)for your username. Is this correct? (Y/n)")"
    done
    useradd $USER
    usermod -a -G wheel $USER
    if [ $SUDO == 1 ] || [ $ROOT == 0 ]; then
      SUDOERR="0"
      if ! pacman -Ql sudo &> /dev/null; then
        if ! pacman -S --noconfirm --needed sudo &> /dev/null; then
          echo "Failed to fetch sudo!" >> /tmp/lemonaid.log
          SUDOERR="1"
        fi
      fi
      if [ $SUDOERR == 0 ]; then
        echo "$USER ALL=(ALL:ALL) ALL" >> /etc/sudoers
      fi
    fi
    ctext cyan std "Enter a new password for $USER: "
    until passwd $USER; do
      ctext cyan std "Enter a new password for $USER: "
    done
    mkdir -p /home/$USER
    cp -r /etc/skel/.bash* /home/$USER
    echo "PATH=/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin:$PATH" >> /home/$USER/.bashrc
    if which nano &> /dev/null; then
      echo "include /usr/share/nano/*.nanorc" > /home/$USER/.nanorc
    fi
    chown $USER:$USER /home/$USER
    chown $USER:$USER /home/$USER/.*
  fi
  if [ $POSTINSTALLSCRIPTS == 1 ]; then
    ctext cyan std "-Executing post-install scripts-"
    PISCRIPTS=$(find /etc/lemon/postinstall/)
    for i in $PISCRIPTS; do
      if file $i | grep executable &> /dev/null; then
        chmod 755 $i
        . $i || echo "script $i failed!" >> /tmp/lemonaid.log
      fi
    done
  fi
  LOG=/tmp/lemonaid.log
  if [ -f "$LOG" ]; then
    ctext magenta std "Process completed sucessfuly, but errors were detected"
    if isyes "$(ctext cyan nnl "Would you like to read the error log? (Y/n)")"; then
      $EDITOR $LOG
      echo "."
    fi
  fi
  if isyes "$(ctext cyan nnl "Do you have any additional (manual) configuration to do inside the chroot environment? (Y/n)")"; then
    ctext green std "You will now be presented with a bash shell within a chroot of the installation target."
    ctext green std "When you are finished with additional setup, type exit and the install process will continue."
    bash --login -i
  fi
}

PREP
MAIN
BOOT
CONF
