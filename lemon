#!/usr/bin/env bash

#        Lemon        #
#      V.1.0 RC4      #
#---------------------
# Maintainer: Eris Nihila (M1ndFlay3r)
#             sp0t1fyfr33tr1alabus3@outlook.com
#
#
# This software comes with absolutely NO WARRANTY, expressed or implied. Any and all use of this software is entirely
# at your own risk. By using this software you agree to release and forever discharge the developer from all manner of actions,
# cause of action, debts, accounts, bonds, contracts, claims and demands for or by any reason of damage, loss (including data loss)
# or injury to person or property that has been or may be sustained as a result of your usage of this software.
#
# This software is shipped under the GNU General Public License and is provided "as is", with no explicit or implied expectation or
# obligation to provide support, development, or otherwise unspecified services of any kind. Furthermore, the developer reserves the
# right to cease development at any time for any reason, with no obligation to provide reason(s) for cessation.
#
# This agreement covers *all* components of lemon (lemon, lemonaid, lemonlib, aurhandler, and lemon.conf).
#
#

source "${BASH_SOURCE%/*}/lemon.conf"
source "${BASH_SOURCE%/*}/resources/lemonlib"
STARTDIR=$(pwd)

ctext yellow std " _                                 "
ctext yellow std "| |                                "
ctext yellow std "| | ___ _ __ ___   ___  _ __       "
ctext yellow std "| |/ _ \  _   _ \ / _ \|  _ \      "
ctext yellow std "| |  __/ | | | | | (_) | | | |     "
ctext yellow std "|_|\___|_| |_| |_|\___/|_| |_|     "
ctext yellow std "                                   "
ctext yellow std "         By $(ctext red)M1ndFlay3r "
ctext yellow std "- - - - - - - - - - - - - - - -    "

##
## Prompts user to edit lemon.conf prior to install
##
if isyes "$(ctext cyan nnl "Do you wish to edit lemon.conf prior to install? (Y/n)")"; then
  $EDITOR "${BASH_SOURCE%/*}/lemon.conf"
  source "${BASH_SOURCE%/*}/lemon.conf"
fi

##
## Tests network connectivity, readies pacman, sets keyboard layout if needed, and detects whether the system is BIOS or UEFI
##
function PREP {
  if ! nettest --noretry; then
    untilnetpass '
      ctext magenta std "An internet connection is required to continue.";
      ctext cyan std "You will now return to the shell. When you are finished setting up your connection, type exit and the installation will resume.";
      bash --login -i
    '
  fi
  ctext cyan std "Syncing pacman..."
  if ! pacman -Sy; then
    ctext red std "Failed to sync pacman! Check your internet settings, then restart lemon"
    exit 1
  fi
  echo "."
  if [ ! $NOREFLECTOR == 1 ]; then
    ctext cyan std "Fetching reflector..."
    if ! pacman -S --needed --noconfirm reflector &> /dev/null; then
      ctext magenta std "Failed to fetch reflector! Mirrorlist will be unmodified from the one shipped with the live ISO"
      if ! isyes "$(ctext cyan nnl "Continue anyway? (Y/n)")"; then
        ctext red std "Abort"
        exit 1
      fi
    else
      ctext cyan std "Sorting mirrors with reflector."
      ctext cyan std "This may take a while. Please wait."
      reflector --latest $REFLECTORCOUNT --protocol http --protocol https --sort rate --save /etc/pacman.d/mirrorlist
      ctext cyan std "Resyncing pacman with updated mirrorlist"
      if ! pacman -Sy; then
        ctext red std "Failed to resync pacman after reflector sorting! Check your mirrorlist"
        exit 1
      fi
    fi
  fi
  echo "."
  ctext cyan std "Detecting bootmode..."
  if ls -a /sys/firmware/efi/efivars &> /dev/null; then
    BOOTMODE="0"
  else
    BOOTMODE="1"
  fi
  if [ $CUSTOM_KEYMAP == 1 ]; then
    yes="1"
    while [ ! "$yes" == 0 ]; do
      ls /usr/share/kbd/keymaps/**/*.map.gz
      sleep 0.5
      unset LAYOUT
      until [ ! -z "$LAYOUT" ]; do
        read -p "$(ctext cyan nnl "Select keyboard layout from list (eg: de-latin1): ")" LAYOUT
      done
      isyes "$(ctext cyan nnl "You have entered $(ctext green)$LAYOUT$(ctext cyan). is this correct? (Y/n)")"
    done
    loadkeys $LAYOUT
    KEYSET="1"
  else
    KEYSET="0"
  fi
}

##
## Disk setup / partitioner
##
function PARTITION {
  RESPONSE="0"
  ROOTSET="0"
  EFISET="0"
  SWAPSET="0"
  HOMESET="0"
  ADDMOUNTS="0"
  if ls -a /tmp/mounts.lemon &> /dev/null; then
    IFS=$'\n'
    for i in $(cat /tmp/mounts.lemon); do
      umount $i
    done
    unset IFS
  fi
  if ls -a /tmp/swap.lemon &> /dev/null; then
    IFS=$'\n'
    for i in $(cat /tmp/swap.lemon); do
      swapoff $i
    done
    unset IFS
  fi
  if ls -a /tmp/mnt &> /dev/null; then
    if ! rm -rf /tmp/mnt; then
      ctext red std "Mounts exist in /tmp/mnt from a previous run, but unable to unmount them!"
      ctext red std "Either unmount manually, or restart your computer before running lemon"
      exit 1
    fi
  fi
  if ! which $DISKPART &> /dev/null; then
    dDISKPART="$DISKPART"
    DISKPART="fdisk"
  fi
  ISDATAVIEW="0"
  until [ $RESPONSE == 9 ] && [ $ROOTSET == 1 ] && ([ $BOOTMODE == 1 ] || [ $EFISET == 1 ]); do
    PVALID=("1" "2" "3" "4" "5" "6" "7" "8" "9")
    untilvalidresponse '
      if [ ! $ISDATAVIEW == 1 ]; then
        clear;
      else
        ISDATAVIEW="0";
      fi;
      echo " ";
      ctext green std "                 Drive Setup";
      ctext green std "                 -----------";
      ctext green std "Choose a menu option to proceed with disk setup.";
      ctext green std "When you are finished, hit finish to continue the installation.";
      echo " ";
      if [ $BOOTMODE == 0 ]; then
        ctext cyan std "Note: you MUST have both an EFI and root partition!";
      else
        if [ $BOOTMODE == 1 ]; then
          ctext cyan std "Note: you MUST have a root partition!";
        else
          ctext red std "---------------------------------";
          ctext red std "FATAL: Bootmode detection failed!";
          ctext red std "---------------------------------";
          exit 1;
        fi;
      fi;
      if [ ! -z "$dDISKPART" ]; then
        echo " ";
	echo " ";
        ctext magenta std "Note: $dDISKPART not found in PATH. Defaulting on fdisk.";
      fi;
      ctext green std "...................................................................";
      ctext green std "1: Drive setup ($DISKPART)";
      ctext green std "2: Set ROOT partition";
      if [ $BOOTMODE == 0 ]; then
        ctext green std "3: Set  EFI partition";
      else
        tput dim;
        echo -e "\e[9m3: Set  EFI partition\e[0m";
        tput sgr 0;
      fi;
      ctext green std "4: Set SWAP partition (optional)";
      ctext green std "5: Set HOME partition (optional)";
      ctext green std "6: Set additional mountpoints (optional)";
      ctext green std "7: View change summary";
      ctext green std "8: Start over";
      ctext green std "9: Finish"
    ' "${PVALID[@]}"
    clear
    if ([ $RESPONSE == 9 ] && [ ! $ROOTSET == 1 ]) || ([ $RESPONSE == 9 ] && [ $BOOTMODE == 0 ] && [ ! $EFISET == 1 ]); then
      ctext magenta std "Error: Essential partition not set! (either $(ctext red)ROOT $(ctext magenta)partition not set, or $(ctext red)EFI $(ctext magenta)partition not set if running in EFI mode)"
      RESPONSE="0"
      sleep 1
    fi
    if [ $RESPONSE == 1 ]; then
      MENU="NULL"
      until [ $MENU == done ]; do
        echo "."
        yes="1"
        while [ ! "$yes" == 0 ]; do
          DRIVE="NULL"
          until ls -a $DRIVE &> /dev/null; do
            DRIVE="NULL"
            fdisk -l
            read -p "$(ctext cyan nnl "Target drive: ")" DRIVE
            if [ -z "$DRIVE" ]; then
              DRIVE="NULL"
            fi
            if ! ls -a $DRIVE &> /dev/null; then
              ctext magenta std "Error: $(ctext red)$DRIVE $(ctext magenta)does not exist!"
              sleep 1
            fi
          done
          isyes "$(ctext cyan nnl "You have entered $(ctext green)$DRIVE$(ctext cyan). Is this correct? (Y/n)")"
        done
        if ! $DISKPART $DRIVE; then
          ctext magenta std "Error: failed to execute $DISKPART on $(ctext red)$DRIVE!"
        fi
        if ! isyes "$(ctext cyan nnl "Run $DISKPART on another drive? (Y/n)")"; then
	  MENU="done"
	fi
        if [ -z "$MENU" ]; then
          MENU="NULL"
        fi
      done
    fi
    if [ $RESPONSE == 2 ]; then
      yes="1"
      while [ ! "$yes" == 0 ]; do
        fdisk -l
        ROOT="NULL"
        until ls -a $ROOT &> /dev/null; do
          read -p "$(ctext cyan nnl "Enter $(ctext green)ROOT $(ctext cyan)partition: ")" ROOT
          if [ -z "$ROOT" ]; then
            ROOT="NULL"
          fi
          if ! ls -a $ROOT &> /dev/null; then
            ctext magenta std "Error: partition $(ctext red)$ROOT $(ctext magenta)does not exist!"
          fi
        done
        isyes "$(ctext cyan nnl "You have entered $(ctext green)$ROOT $(ctext cyan)for your $(ctext green)ROOT $(ctext cyan)partition. Is this correct? (Y/n)")"
      done
      ROOTSET="1"
    fi
    if [ $RESPONSE == 3 ]; then
      if [ $BOOTMODE == 1 ]; then
        ctext magenta std "Error: you are running in $(ctext red)BIOS $(ctext magenta)mode! $(ctext red)EFI $(ctext magenta)partition setting is disabled"
      else
        yes="1"
        while [ ! "$yes" == 0 ]; do
          fdisk -l
          EFI="NULL"
          until ls -a $EFI &> /dev/null; do
            read -p "$(ctext cyan nnl "Enter $(ctext green)EFI $(ctext cyan)partition: ")" EFI
            if [ -z "$EFI" ]; then
              EFI="NULL"
            fi
            if ! ls -a $EFI &> /dev/null; then
              ctext magenta std "Error: partition $(ctext red)$EFI $(ctext magenta)does not exist!"
            fi
          done
          isyes "$(ctext cyan nnl "You have entered $(ctext green)$EFI $(ctext cyan)for your $(ctext green)EFI $(ctext cyan)partition. Is this correct? (Y/n)")"
        done
        EFISET="1"
      fi
    fi
    if [ $RESPONSE == 4 ]; then
      yes="1"
      while [ ! "$yes" == 0 ]; do
        fdisk -l
        SWAP="NULL"
        until ls -a $SWAP &> /dev/null; do
          read -p "$(ctext cyan nnl "Enter $(ctext green)SWAP $(ctext cyan)partition: ")" SWAP
          if [ -z "$SWAP" ]; then
            SWAP="NULL"
          fi
          if ! ls -a $SWAP &> /dev/null; then
            ctext magenta std "Error: Partition $(ctext red)$SWAP $(ctext magenta)does not exist!"
          fi
        done
        isyes "$(ctext cyan nnl "You have entered $(ctext green)$SWAP $(ctext cyan)for your $(ctext green)SWAP $(ctext cyan)partition. Is this correct? (Y/n)")"
      done
      SWAPSET="1"
    fi
    if [ $RESPONSE == 5 ]; then
      yes="1"
      while [ ! "$yes" == 0 ]; do
        fdisk -l
        dHOME="NULL"
        until ls -a $dHOME &> /dev/null; do
          read -p "$(ctext cyan nnl "Enter $(ctext green)HOME $(ctext cyan)partition: ")" dHOME
          if [ -z "dHOME" ]; then
            dHOME="NULL"
          fi
          if ! ls -a $dHOME &> dev/null; then
            ctext magenta std "Error: Partition $(ctext red)$dHOME $(ctext magenta)does not exist!"
          fi
        done
        isyes "$(ctext cyan nnl "You have entered $(ctext green)$dHOME $(ctext cyan)for your $(ctext green)HOME $(ctext cyan)partition. Is this correct? (Y/n)")"
      done
      echo "."
      if isyes "$(ctext cyan nnl "Format $(ctext green)HOME $(ctext cyan)partition? (Y/n)")"; then
        FORMATHOME="1"
      fi
      HOMESET="1"
    fi
    if [ $RESPONSE == 6 ]; then
      RESPONSE="NULL"
      TARGETPART="NULL"
      TPFORMAT="0"
      FORMATOPTS="NULL"
      MOUNTOPTS="NULL"
      MOUNTPOINT="NULL"
      NEEDFSSET="0"
      dISDATAVIEW="0"
      until [ $RESPONSE == done ]; do
        dVALID=("1" "2" "3" "4" "5" "6" "7" "done")
        untilvalidresponse '
          if [ ! $dISDATAVIEW == 1 ]; then
            clear;
          else
            dISDATAVIEW="0";
          fi;
          ctext green std "Additional mountpoint setup menu";
          ctext green std "--------------------------------";
          ctext green std "Choose an option from the menu below.";
          ctext green std "when you are finished setting up additional mountpoints, type 'done' to return to the previous menu.";
          ctext green std "----------------------------------------------------------------------------------------------------";
          ctext green std "1 - Set target partition";
          ctext green std "2 - Formatting options";
          ctext green std "3 - Set target partition mountpoint";
          ctext green std "4 - Set mountpoint options";
          ctext green std "5 - List changes to commit";
          ctext green std "6 - Start over";
          ctext green std "7 - Commit changes"
        ' "${dVALID[@]}"
        clear
        if [ $RESPONSE == 1 ]; then
          fdisk -l
          "."
          read -p "$(ctext cyan nnl "Enter target partition: ")" TARGETPART
          if [ -z "$TARGETPART" ]; then
            TARGETPART="NULL"
          fi
          if ! ls -a $TARGETPART &> /dev/null; then
            ctext magenta std "Error: $(ctext red)$TARGETPART $(ctext magenta)does not exist!"
            TARGETPART="NULL"
          else
            if ! isyes "$(ctext cyan nnl "You have entered $(ctext green)$TARGETPART$(ctext cyan). Is this correct? (Y/n)")"; then
              ctext magenta std "Cancelled"
              TARGETPART="NULL"
            else
              echo "."
              ctext cyan std "Target partition $(ctext green)$TARGETPART $(ctext cyan)set"
              echo "."
            fi
          fi
        fi
        if [ $RESPONSE == 2 ]; then
          RESPONSE="NULL"
          until [ $RESPONSE == 3 ] && [ $NEEDFSSET == 0 ]; do
            zVALID=("1" "2" "3")
            untilvalidresponse '
              ctext green std "Format options";
              ctext green std "--------------";
              ctext green std "1 - Toggle format target";
              ctext green std "2 - Filesystem select";
              ctext green std "3 - back"
            ' "${zVALID[@]}"
            clear
            if [ $RESPONSE == 1 ]; then
              if isyes "$(ctext cyan nnl "Format target partition? (Y/n)")"; then
                ctext cyan std "Target partition format $(ctext green)ON"
                TPFORMAT="1"
                NEEDFSSET="1"
              else
                ctext cyan std "Target partition format $(ctext green)OFF"
                TPFORMAT="0"
                NEEDFSSET="0"
              fi
            fi
            if [ $RESPONSE == 2 ]; then
              until [ $RESPONSE == 4 ]; do
                xVALID=("1" "2" "3" "4")
                untilvalidresponse '
                  ctext green std "Choose filesystem for target partition";
                  ctext green std "--------------------------------------";
                  ctext green std "1 - ext4";
                  ctext green std "2 - btrfs";
                  ctext green std "3 - vfat";
                  ctext green std "4 - back"
                ' "${xVALID[@]}"
                clear
                if [ $RESPONSE == 1 ]; then
                  if isyes "$(ctext cyan nnl "You have chosen $(ctext green)ext4 $(ctext cyan)for target filesystem. Is this correct? (Y/n)")"; then
                    FORMATOPTS="ext4"
                    NEEDFSSET="0"
                  fi
                fi
                if [ $RESPONSE == 2 ]; then
                  if isyes "$(ctext cyan nnl "You have chosen $(ctext green)btrfs $(ctext cyan)for target filesystem. Is this correct? (Y/n)")"; then
                    FORMATOPTS="btrfs"
                    NEEDFSSET="0"
                  fi
                fi
                if [ $RESPONSE == 3 ]; then
                  if isyes "$(ctext cyan nnl "You have chosen $(ctext green)vfat $(ctext cyan)for target filesystem. Is this correct? (Y/n)")"; then
                    FORMATOPTS="vfat"
                    NEEDFSSET="0"
                  fi
                fi
              done
            fi
            if [ $RESPONSE == 3 ] && [ $NEEDFSSET == 1 ]; then
              ctext magenta std "Error: Format target partition is $(ctext red)ON$(ctext magenta), but no filesystem is selected!"
              ctext magenta std "Please select a filesystem for target partition, or toggle format target partition $(ctext red)OFF"
            fi
          done
        fi
        if [ $RESPONSE == 3 ]; then
          yes="1"
          while [ ! "$yes" == 0 ]; do
            read -p "$(ctext cyan nnl "Enter target mountpoint: ")" MOUNTPOINT
            if [ -z "$MOUNTPOINT" ]; then
	      MOUNTPOINT="NULL"
            fi
            isyes "$(ctext cyan nnl "You have entered $(ctext green)$MOUNTPOINT$(ctext cyan). Is this correct? (Y/n)")"
          done
        fi
        if [ $RESPONSE == 4 ]; then
          read -p "$(ctext cyan nnl "Enter mount options: ")" MOUNTOPTS
          if [ -z "$MOUNTOPTS" ]; then
            MOUNTOPTS="NULL"
          fi
          if ! isyes "$(ctext cyan nnl "You have entered $(ctext green)$MOUNTOPTS$(ctext cyan). Is this correct? (Y/n)")"; then
            ctext magenta std "Cancelled"
            MOUNTOPTS="NULL"
          fi
        fi
        if [ $RESPONSE == 5 ]; then
          ctext cyan std "Target partition: $(ctext green)$TARGETPART"
          if [ $TPFORMAT == 1 ]; then
            ctext cyan std "Format: $(ctext green)Yes$(ctext cyan) \( $(ctext green)$FORMATOPTS$(ctext cyan) \)"
          else
            ctext cyan std "Format: $(ctext green)No"
          fi
          ctext cyan std "Mountpoint: $(ctext green)$MOUNTPOINT"
          if [ ! $MOUNTOPTS == NULL ]; then
            ctext cyan std "Mountopts: $(ctext green)$MOUNTOPTS"
          else
            ctext cyan std "Mountopts:"
          fi
          dISDATAVIEW="1"
        fi
        if [ $RESPONSE == 6 ]; then
          if isyes "$(ctext cyan nnl "Are you sure you wish to start over? (Y/n)")"; then
            TARGETPART="NULL"
            TPFORMAT="0"
            FORMATOPTS="NULL"
            MOUNTOPTS="NULL"
            MOUNTPOINT="NULL"
            NEEDFSSET="0"
            clear
            dISDATAVIEW="1"
            ctext cyan std "All fields reset to NULL"
          fi
        fi
        if [ $RESPONSE == 7 ]; then
          ctext cyan std "------------------------"
          ctext cyan std "Target partition: $(ctext green)$TARGETPART"
          if [ $TPFORMAT == 1 ]; then
            ctext cyan std "Format: $(ctext green)Yes$(ctext cyan) ( $(ctext green)$FORMATOPTS$(ctext cyan) )"
          else
            ctext cyan std "Format: $(ctext green)No"
          fi
          ctext cyan std "Mountpoint: $(ctext green)$MOUNTPOINT"
          if [ ! $MOUNTOPTS == NULL ]; then
            ctext cyan std "Mountopts: $(ctext green)$MOUNTOPTS"
          else
            ctext cyan std "Mountopts:"
          fi
          ctext cyan std "------------------------"
          if isyes "$(ctext cyan nnl "Commit the above changes? (Y/n)")"; then
            if [ $TPFORMAT == 1 ]; then
              FORMATERR="0"
              if [ $FORMATOPTS == btrfs ]; then
                if ! mkfs.btrfs $TARGETPART; then
                  ctext magenta std "mkfs.btrfs failed on $(ctext red)$TARGETPART!"
                  FORMATERR="1"
                else
                  mount $TARGETPART /mnt
                  cd /mnt
                  btrfs subvolume create _active
                  btrfs subvolume create _active/levol
                  btrfs subvolume create _snapshots
                  cd ..
                  umount /mnt
                  if [ $MOUNTOPTS == NULL ]; then
                    MOUNTOPTS="-o subvol=_active/levol"
                  fi
                fi
              fi
              if [ $FORMATOPTS == ext4 ]; then
                if ! mkfs.ext4 $TARGETPART; then
                  ctext magenta std "mkfs.ext4 failed on $(ctext red)$TARGETPART!"
                  FORMATERR="1"
                fi
              fi
              if [ $FORMATOPTS == vfat ]; then
                if ! mkfs.vfat $TARGETPART; then
                  ctext magenta std "mkfs.vfat failed on $(ctext red)$TARGETPART!"
                  FORMATERR="1"
                fi
              fi
            fi
            if [ ! $MOUNTOPTS == NULL ] && ([ ! $FORMATERR == 1 ] || [ ! $TPFORMAT == 1 ]); then
              echo "$MOUNTOPTS $TARGETPART /tmp/mnt/$MOUNTPOINT" >> /tmp/mountpoints.lemon
              ADDMOUNTS="1"
              echo "/tmp/mnt/$MOUNTPOINT" >> /tmp/mounts.lemon
            else
              if [ ! $FORMATERR == 1 ] || [ ! $TPFORMAT == 1 ]; then
                echo "$TARGETPART /tmp/mnt/$MOUNTPOINT" >> /tmp/mountpoints.lemon
                ADDMOUNTS="1"
                echo "/tmp/mnt/$MOUNTPOINT" >> /tmp/mounts.lemon
                echo "/tmp/mnt/$MOUNTPOINT" >> /tmp/dmounts.lemon
              fi
            fi
          fi
        fi
      done
    fi
    if [ $RESPONSE == 7 ]; then
      ctext green std "---------------------------------"
      if [ $ROOTSET == 1 ]; then
        ctext cyan std "ROOT partition: $(ctext blue)$ROOT"
      fi
      if [ $EFISET == 1 ]; then
        ctext cyan std "EFI partition:  $(ctext blue)$EFI"
      fi
      if [ $SWAPSET == 1 ]; then
        ctext cyan std "SWAP partition: $(ctext blue)$SWAP"
      fi
      if [ $HOMESET == 1 ]; then
        ctext cyan std "HOME partition: $(ctext blue)$dHOME"
      fi
      if [ $ADDMOUNTS == 1 ]; then
        ctext green
        echo "-----------------"
        echo "Additional mounts"
        echo "-----------------"
        ctext reset
        IFS=$'\n'
        for i in cat /tmp/mountpoints.lemon; do
          ctext cyan std "$i"
        done
        unset IFS
      fi
      if [ ! $ROOTSET == 1 ] && [ ! $EFISET == 1 ] && [ ! $SWAPSET == 1 ] && [ ! $HOMESET == 1 ] && [ ! $ADDMOUNTS == 1 ]; then
        ctext cyan std "All fields are empty."
      fi
      ctext green std "---------------------------------"
      ISDATAVIEW="1"
    fi
    if [ $RESPONSE == 8 ]; then
      if isyes "$(ctext cyan nnl "Are you sure you wish to clear all data? (Y/n)")"; then
        ROOT="NULL"
        ROOTSET="0"
        EFI="NULL"
        EFISET="0"
        SWAP="NULL"
        SWAPSET="0"
        dHOME="NULL"
        HOMESET="0"
        rm -rf /tmp/mountpoints.lemon
        rm -rf /tmp/mounts.lemon
        rm -rf /tmp/dmounts.lemon
        ADDMOUNTS="0"
        clear
        ISDATAVIEW="1"
        ctext cyan std "All fields reset to null."
      fi
    fi
  done
  echo "."
  ctext cyan std "Formatting..."
  sleep 0.5
  if [ $USEBTRFS == 1 ]; then
    if ! mkfs.btrfs $ROOT; then
      ctext red std "Formatting ROOT partition failed!"
      exit 1
    else
      mount $ROOT /mnt
      cd /mnt
      btrfs subvolume create _active
      btrfs subvolume create _active/rootvol
      if [ ! $USEBTRFSHOME == 1 ]; then
        btrfs subvolume create _active/homevol
      fi
      btrfs subvolume create _snapshots
      cd ..
      umount /mnt
    fi
  else
    if ! mkfs.ext4 $ROOT; then
      ctext red std "Formatting ROOT partition failed!"
      exit 1
    fi
  fi
  if [ $BOOTMODE == 0 ]; then
    if ! mkfs.vfat $EFI; then
      ctext red std "Formatting EFI partition failed!"
      exit 1
    fi
  fi
  if [ -z "$FORMATHOME" ]; then
    FORMATHOME="NULL"
  fi
  if [ $FORMATHOME == 1 ]; then
    if [ $USEBTRFSHOME == 1 ]; then
      if ! mkfs.btrfs $dHOME; then
        ctext red std "Formatting HOME partition failed!"
        exit 1
      else
        mount $dHOME /mnt
        cd /mnt
        btrfs subvolume create _active
        btrfs subvolume create _active/homevol
        btrfs subvolume create _snapshots
        cd ..
        umount /mnt
      fi
    else
      if ! mkfs.ext4 $dHOME; then
        ctext red std "Formatting HOME partition failed!"
        exit 1
      fi
    fi
  fi
  if [ $SWAPSET == 1 ]; then
    if ! mkswap $SWAP; then
      ctext red std "Formatting SWAP partition failed!"
      exit 1
    else
      if ! swapon $SWAP; then
        ctext red std "Failed to activate swapspace!"
        exit 1
      else
        echo "$SWAP" >> /tmp/swap.lemon
      fi
    fi
  fi
  echo "."
  ctext cyan std "Mounting..."
  sleep 0.5
  mkdir /tmp/mnt/
  if [ $USEBTRFS == 1 ]; then
    if ! mount -o subvol=_active/rootvol $ROOT /tmp/mnt/; then
      ctext red std "Failed to mount ROOT partition!"
      exit 1
    fi
    mkdir -p /tmp/mnt/mnt/defvol
    if [ ! $USEBTRFSHOME == 1 ]; then
      mkdir /tmp/mnt/home
      if ! mount -o subvol=_active/homevol $ROOT /tmp/mnt/home; then
        ctext red std "Failed to mount ROOT partition!"
        exit 1
      fi
    fi
    if ! mount -o subvol=/ $ROOT /tmp/mnt/mnt/defvol; then
      ctext red std "Failed to mount ROOT partition!"
      exit 1
    fi
    ROOTMOUNTED="1"
  else
    if ! mount $ROOT /tmp/mnt/; then
      ctext red std "Failed to mount ROOT partition!"
      exit 1
    fi
    ROOTMOUNTED="1"
  fi
  if [ $BOOTMODE == 0 ]; then
    mkdir -p /tmp/mnt/boot/efi
    if ! mount $EFI /tmp/mnt/boot/efi; then
      ctext red std "Failed to mount EFI partition!"
      exit 1
    fi
    echo "/tmp/mnt/boot/efi" >> /tmp/mounts.lemon
  else
    mkdir /tmp/mnt/boot
  fi
  if [ $HOMESET == 1 ]; then
    mkdir /tmp/mnt/home
    if [ $USEBTRFSHOME == 1 ]; then
      if ! mount -o subvol=_active/homevol $dHOME /tmp/mnt/home; then
        ctext red std "Failed to mount HOME partition!"
        exit 1
      fi
      echo "/tmp/mnt/home" >> /tmp/mounts.lemon
    else
      if ! mount $dHOME /tmp/mnt/home; then
        ctext red std "Failed to mount HOME partition!"
        exit 1
      fi
      echo "/tmp/mnt/home" >> /tmp/mounts.lemon
    fi
  fi
  if [ $ADDMOUNTS == 1 ]; then
    IFS=$'\n'
    for i in $(cat /tmp/dmounts.lemon); do
      mkdir -p $i
    done
    for i in $(cat /tmp/mountpoints.lemon); do
      if ! mount $i; then
        ctext magenta std "Failed to mount $(ctext red)$i!"
        if ! isyes "$(ctext cyan nnl "Continue anyway? (Y/n)")"; then
          ctext red std "Aborting"
          exit 1
        fi
      fi
    done
    unset IFS
  fi
  if [ $ROOTMOUNTED == 1 ]; then
    echo "/tmp/mnt/" >> /tmp/mounts.lemon
  fi
}

##
## Main installation procedure
##
function INSTALL {
  ctext cyan std "Installing the base system..."
  sleep 0.5
  cd /tmp/mnt/
  if [ $USEBTRFS == 1 ] || [ $USEBTRFSHOME == 1 ]; then
    if ! pacstrap . base btrfs-progs; then
      ctext red std "pacstrap base system failed!"
      exit 1
    fi
  else
    if ! pacstrap . base; then
      ctext red std "pacstrap base system failed!"
      exit 1
    fi
  fi
  genfstab -U /tmp/mnt >> /tmp/mnt/etc/fstab
  if [ $KEYSET == 1 ]; then
    echo "KEYMAP=$LAYOUT" >> etc/vconsole.conf
  fi
  mv etc/resolv.conf etc/resolv.conf.bak
  cp /etc/resolv.conf etc/
  mkdir etc/lemon
  cp -r $STARTDIR/${BASH_SOURCE%/*}/* etc/lemon/
  chmod 755 etc/lemon/resources/lemonaid
  mkdir hostlvm
  mount -t sysfs sys sys/
  mount -t proc proc proc/
  mount -t tmpfs tmp tmp/
  mount --rbind /dev dev/
  mount --rbind /run run/
  mount --rbind /sys/fs/cgroup sys/fs/cgroup/
  mount --bind /run/lvm hostlvm/
  if [ $BOOTMODE == 1 ]; then
    echo "GRUBDRIVE=$DRIVE" >> tmp/info.lemon
  else
    mount --bind /sys/firmware/efi/efivars sys/firmware/efi/efivars/
  fi
  echo "BOOTMODE=$BOOTMODE" >> tmp/info.lemon
  ctext cyan std "Entering chroot"
  COUNT=0
  until [ $COUNT == 3 ]; do
    sleep 1
    echo "."
    COUNT=$((COUNT + 1))
  done
  chroot . /etc/lemon/resources/lemonaid
  rm -rf etc/resolv.conf
  mv etc/resolv.conf.bak etc/resolv.conf
  rm -rf etc/lemon
  echo "."
  if ! isyes "$(ctext cyan nnl "Installation complete! Reboot now? (Y/n)")"; then
    exit 0
  else
    reboot
  fi
}

PREP
PARTITION
INSTALL
