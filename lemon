#!/usr/bin/env bash

#        Lemon        #
#      V.1.0 RC2      #
#---------------------
# Maintainer: Eris Nihila (M1ndFlay3r)
#             sp0t1fyfr33tr1alabus3@outlook.com
#
#
# This software comes with absolutely NO WARRANTY, expressed or implied. Any and all use of this software is entirely
# at your own risk. By using this software you agree to release and forever discharge the developer from all manner of actions,
# cause of action, debts, accounts, bonds, contracts, claims and demands for or by any reason of damage, loss (including data loss)
# or injury to person or property that has been or may be sustained as a result of your usage of this software.
#
# This software is shipped under the GNU General Public License and is provided "as is", with no explicit or implied expectation or
# obligation to provide support, development, or otherwise unspecified services of any kind. Furthermore, the developer reserves the
# right to cease development at any time for any reason, with no obligation to provide reason(s) for cessation.
#
# This agreement covers *all* components of lemon (lemon, lemonaid, lemonlib, and lemon.conf).
#
#

echo " _                             "
echo "| |                            "
echo "| | ___ _ __ ___   ___  _ __   "
echo "| |/ _ \  _   _ \ / _ \|  _ \  "
echo "| |  __/ | | | | | (_) | | | | "
echo "|_|\___|_| |_| |_|\___/|_| |_| "
echo "                               "
echo "         By M1ndflay3r         "
echo "- - - - - - - - - - - - - - - -"

source "${BASH_SOURCE%/*}/lemon.conf"
source "${BASH_SOURCE%/*}/resources/lemonlib"
STARTDIR=$(pwd)



##
## Tests network connectivity, readies pacman, sets keyboard layout if needed, and detects whether the system is BIOS or UEFI
##
function PREP {
  if ! nettest --noretry; then
    untilnetpass '
      echo "An internet connection is required to continue.";
      echo "You will now return to the shell. When you are finished setting up your connection, type exit and the installation will resume.";
      bash --login -i
    '
  fi
  echo "Syncing pacman..."
  if ! pacman -Sy; then
    echo "Failed to sync pacman! Check your internet settings, then restart lemon"
    exit 1
  fi
  echo "."
  if [ ! $NOREFLECTOR == 1 ]; then
    echo "Fetching reflector..."
    if ! pacman -S --needed --noconfirm reflector &> /dev/null; then
      echo "Failed to fetch reflector! Mirrorlist will be unmodified from the one shipped with the live ISO"
      if ! isyes "Continue anyway? (Y/n)"; then
        echo "Abort"
        exit 1
      fi
    else
      echo "Sorting mirrors with reflector."
      echo "This may take a while. Please wait." 
      reflector --latest 50 --protocol http --protocol https --sort rate --save /etc/pacman.d/mirrorlist
      echo "Resyncing pacman with updated mirrorlist"
      if ! pacman -Sy; then
        echo "Failed to resync pacman after reflector sorting! Check your mirrorlist"
        exit 1
      fi
    fi
  fi
  echo "."
  echo "Detecting bootmode..."
  if ls -a /sys/firmware/efi/efivars &> /dev/null; then
    BOOTMODE="0"
  else
    BOOTMODE="1"
  fi
  if [ $CUSTOM_KEYMAP == 1 ]; then
    yes="1"
    while [ ! "$yes" == 0 ]; do
      ls /usr/share/kbd/keymaps/**/*.map.gz
      sleep 0.5
      unset LAYOUT
      until [ ! -z "$LAYOUT" ]; do
        read -p "Select keyboard layout from list (eg: de-latin1): " LAYOUT
      done
      isyes "You have entered $LAYOUT. is this correct? (Y/n)"
    done
    loadkeys $LAYOUT
    KEYSET="1"
  else
    KEYSET="0"
  fi
}

##
## Disk setup / partitioner
##
function PARTITION {
  RESPONSE="0"
  ROOTSET="0"
  EFISET="0"
  SWAPSET="0"
  HOMESET="0"
  if ls -a /tmp/mounts.lemon &> /dev/null; then
    IFS=$'\n'
    for i in $(cat /tmp/mounts.lemon); do
      umount $i
    done
    unset IFS
  fi
  if ls -a /tmp/swap.lemon &> /dev/null; then
    IFS=$'\n'
    for i in $(cat /tmp/swap.lemon); do
      swapoff $i
    done
    unset IFS
  fi
  if ls -a /tmp/mnt &> /dev/null; then
    if ! rm -rf /tmp/mnt; then
      echo "Mounts exist in /tmp/mnt from a previous run, but unable to unmount them!"
      echo "Either unmount manually, or restart your computer before running lemon"
      exit 1
    fi
  fi
  until [ $RESPONSE == 7 ] && [ $ROOTSET == 1 ] && ([ $BOOTMODE == 1 ] || [ $EFISET == 1 ]); do
    PVALID=("1" "2" "3" "4" "5" "6" "7")
    untilvalidresponse '
      echo " ";
      echo "                 Drive Setup";
      echo "                 -----------";
      echo "Choose a menu option to proceed with disk setup.";
      echo "When you are finished, hit finish to continue the installation.";
      echo " ";
      if [ $BOOTMODE == 0 ]; then
        echo "Note: you MUST have both an EFI and root partition!";
      else
        if [ $BOOTMODE == 1 ]; then
          echo "Note: you MUST have a root partition!";
        else
          echo "---------------------------------";
          echo "FATAL: Bootmode detection failed!";
          echo "---------------------------------";
          exit 1;
        fi;
      fi;
      echo "...................................................................";
      echo "1: Drive setup (fdisk)";
      echo "2: Set ROOT partition";
      if [ $BOOTMODE == 0 ]; then
        echo "3: Set  EFI partition";
      else
        echo -e "\e[9m3: Set  EFI partition\e[0m";
      fi;
      echo "4: Set SWAP partition (optional)";
      echo "5: Set HOME partition (optional)";
      echo "6: Set additional mountpoints (optional)";
      echo "7: Finish"
    ' "${PVALID[@]}"
    if ([ $RESPONSE == 7 ] && [ ! $ROOTSET == 1 ]) || ([ $RESPONSE == 7 ] && [ $BOOTMODE == 0 ] && [ ! $EFISET == 1 ]); then
      echo "Error: Essential partition not set! (either ROOT partition not set, or EFI partition not set if running in EFI mode)"
      RESPONSE="0"
      sleep 1
    fi
    if [ $RESPONSE == 1 ]; then
      MENU="NULL"
      until [ $MENU == done ]; do
        echo "."
        yes="1"
        while [ ! "$yes" == 0 ]; do
          DRIVE="NULL"
          until ls -a $DRIVE &> /dev/null; do
            DRIVE="NULL"
            fdisk -l
            read -p "Target drive: " DRIVE
            if [ -z "$DRIVE" ]; then
              DRIVE="NULL"
            fi
            if ! ls -a $DRIVE &> /dev/null; then
              echo "Error: $DRIVE does not exist!"
              sleep 1
            fi
          done
          isyes "You have entered $DRIVE. Is this correct? (Y/n)"
        done
        if ! fdisk $DRIVE; then
          echo "Error: failed to execute fdisk on $DRIVE!"
        fi
        if ! isyes "Run fdisk on another drive? (Y/n)"; then
	  MENU="done"
	fi
        if [ -z "$MENU" ]; then
          MENU="NULL"
        fi
      done
    fi
    if [ $RESPONSE == 2 ]; then
      yes="1"
      while [ ! "$yes" == 0 ]; do
        fdisk -l
        ROOT="NULL"
        until ls -a $ROOT &> /dev/null; do
          read -p "Enter ROOT partition: " ROOT
          if [ -z "$ROOT" ]; then
            ROOT="NULL"
          fi
          if ! ls -a $ROOT &> /dev/null; then
            echo "Error: partition $ROOT does not exist!"
          fi
        done
        isyes "You have entered $ROOT for your ROOT partition. Is this correct? (Y/n)"
      done
      ROOTSET="1"
    fi
    if [ $RESPONSE == 3 ]; then
      if [ $BOOTMODE == 1 ]; then
        echo "Error: you are running in BIOS mode! EFI partition setting is disabled"
      else
        yes="1"
        while [ ! "$yes" == 0 ]; do
          fdisk -l
          EFI="NULL"
          until ls -a $EFI &> /dev/null; do
            read -p "Enter EFI partition: " EFI
            if [ -z "$EFI" ]; then
              EFI="NULL"
            fi
            if ! ls -a $EFI &> /dev/null; then
              echo "Error: partition $EFI does not exist!"
            fi
          done
          isyes "You have entered $EFI for your EFI partition. Is this correct? (Y/n)"
        done
        EFISET="1"
      fi
    fi
    if [ $RESPONSE == 4 ]; then
      yes="1"
      while [ ! "$yes" == 0 ]; do
        fdisk -l
        SWAP="NULL"
        until ls -a $SWAP &> /dev/null; do
          read -p "Enter SWAP partition: " SWAP
          if [ -z "$SWAP" ]; then
            SWAP="NULL"
          fi
          if ! ls -a $SWAP &> /dev/null; then
            echo "Error: Partition $SWAP does not exist!"
          fi
        done
        isyes "You have entered $SWAP for your SWAP partition. Is this correct? (Y/n)"
      done
      SWAPSET="1"
    fi
    if [ $RESPONSE == 5 ]; then
      yes="1"
      while [ ! "$yes" == 0 ]; do
        fdisk -l
        dHOME="NULL"
        until ls -a $dHOME &> /dev/null; do
          read -p "Enter HOME partition: " dHOME
          if [ -z "dHOME" ]; then
            dHOME="NULL"
          fi
          if ! ls -a $dHOME &> dev/null; then
            echo "Error: Partition $dHOME does not exist!"
          fi
        done
        isyes "You have entered $dHOME for your HOME partition. Is this correct? (Y/n)"
      done
      echo "."
      if isyes "Format HOME partition? (Y/n)"; then
        FORMATHOME="1"
      fi
      HOMESET="1"
    fi
    if [ $RESPONSE == 6 ]; then
      RESPONSE="NULL"
      TARGETPART="NULL"
      TPFORMAT="0"
      FORMATOPTS="NULL"
      MOUNTOPTS="NULL"
      MOUNTPOINT="NULL"
      NEEDFSSET="0"
      until [ $RESPONSE == done ]; do
        dVALID=("1" "2" "3" "4" "5" "6" "7" "done")
        untilvalidresponse '
          echo "Additional mountpoint setup menu";
          echo "--------------------------------";
          echo "Choose an option from the menu below.";
          echo "when you are finished setting up additional mountpoints, type 'done' to return to the previous menu.";
          echo "----------------------------------------------------------------------------------------------------";
          echo "1 - Set target partition";
          echo "2 - Formatting options";
          echo "3 - Set target partition mountpoint";
          echo "4 - Set mountpoint options";
          echo "5 - List changes to commit";
          echo "6 - Clear data";
          echo "7 - Commit changes"
        ' "${dVALID[@]}"
        if [ $RESPONSE == 1 ]; then
          fdisk -l
          "."
          read -p "Enter target partition: " TARGETPART
          if [ -z "$TARGETPART" ]; then
            TARGETPART="NULL"
          fi
          if ! ls -a $TARGETPART &> /dev/null; then
            echo "Error: $TARGETPART does not exist!"
            TARGETPART="NULL"
          else
            if ! isyes "You have entered $TARGETPART. Is this correct? (Y/n)"; then
              echo "Cancelled"
              TARGETPART="NULL"
            else
              echo "."
              echo "Target partition $TARGETPART set"
              echo "."
            fi
          fi
        fi
        if [ $RESPONSE == 2 ]; then
          RESPONSE="NULL"
          until [ $RESPONSE == 3 ] && [ $NEEDFSSET == 0 ]; do
            zVALID=("1" "2" "3")
            untilvalidresponse '
              echo "Format options";
              echo "--------------";
              echo "1 - Toggle format target";
              echo "2 - Filesystem select";
              echo "3 - back"
            ' "${zVALID[@]}"
            if [ $RESPONSE == 1 ]; then
              if isyes "Format target partition? (Y/n)"; then
                echo "Target partition format ON"
                TPFORMAT="1"
                NEEDFSSET="1"
              else
                echo "Target partition format OFF"
                TPFORMAT="0"
                NEEDFSSET="0"
              fi
            fi
            if [ $RESPONSE == 2 ]; then
              until [ $RESPONSE == 4 ]; do
                xVALID=("1" "2" "3" "4")
                untilvalidresponse '
                  echo "Choose filesystem for target partition";
                  echo "--------------------------------------";
                  echo "1 - ext4";
                  echo "2 - btrfs";
                  echo "3 - vfat";
                  echo "4 - back"
                ' "${xVALID[@]}"
                if [ $RESPONSE == 1 ]; then
                  if isyes "You have chosen ext4 for target filesystem. Is this correct? (Y/n)"; then
                    FORMATOPTS="ext4"
                    NEEDFSSET="0"
                  fi
                fi
                if [ $RESPONSE == 2 ]; then
                  if isyes "You have chosen btrfs for target filesystem. Is this correct? (Y/n)"; then
                    FORMATOPTS="btrfs"
                    NEEDFSSET="0"
                  fi
                fi
                if [ $RESPONSE == 3 ]; then
                  if isyes "You have chosen vfat for target filesystem. Is this correct? (Y/n)"; then
                    FORMATOPTS="vfat"
                    NEEDFSSET="0"
                  fi
                fi
              done
            fi
            if [ $RESPONSE == 3 ] && [ $NEEDFSSET == 1 ]; then
              echo "Error: Format target partition is ON, but no filesystem is selected!"
              echo "Please select a filesystem for target partition, or toggle format target partition OFF"
            fi
          done
        fi
        if [ $RESPONSE == 3 ]; then
          yes="1"
          while [ ! "$yes" == 0 ]; do
            read -p "Enter target mountpoint: " MOUNTPOINT
            if [ -z "$MOUNTPOINT" ]; then
	      MOUNTPOINT="NULL"
            fi
            isyes "You have entered $MOUNTPOINT. Is this correct? (Y/n)"
          done
        fi
        if [ $RESPONSE == 4 ]; then
          read -p "Enter mount options: " MOUNTOPTS
          if [ -z "$MOUNTOPTS" ]; then
            MOUNTOPTS="NULL"
          fi
          if ! isyes "You have entered $MOUNTOPTS. Is this correct? (Y/n)"; then
            echo "Cancelled"
            MOUNTOPTS="NULL"
          fi
        fi
        if [ $RESPONSE == 5 ]; then
          echo "Target partition: $TARGETPART"
          if [ $TPFORMAT == 1 ]; then
            echo "Format: Yes \( $FORMATOPTS \)"
          else
            echo "Format: No"
          fi
          echo "Mountpoint: $MOUNTPOINT"
          if [ ! $MOUNTOPTS == NULL ]; then
            echo "Mountopts: $MOUNTOPTS"
          else
            echo "Mountopts:"
          fi
        fi
        if [ $RESPONSE == 6 ]; then
          if isyes "Are you sure you wish to clear data? (Y/n)"; then
            TARGETPART="NULL"
            TPFORMAT="0"
            FORMATOPTS="NULL"
            MOUNTOPTS="NULL"
            MOUNTPOINT="NULL"
            NEEDFSSET="0"
            echo "All fields reset to NULL"
          fi
        fi
        if [ $RESPONSE == 7 ]; then
          echo "------------------------"
          echo "Target partition: $TARGETPART"
          if [ $TPFORMAT == 1 ]; then
            echo "Format: Yes ( $FORMATOPTS )"
          else
            echo "Format: No"
          fi
          echo "Mountpoint: $MOUNTPOINT"
          if [ ! $MOUNTOPTS == NULL ]; then
            echo "Mountopts: $MOUNTOPTS"
          else
            echo "Mountopts:"
          fi
          echo "------------------------"
          if isyes "Commit the above changes? (Y/n)"; then
            if [ $TPFORMAT == 1 ]; then
              FORMATERR="0"
              if [ $FORMATOPTS == btrfs ]; then
                if ! mkfs.btrfs $TARGETPART; then
                  echo "mkfs.btrfs failed on $TARGETPART!"
                  FORMATERR="1"
                else
                  mount $TARGETPART /mnt
                  cd /mnt
                  btrfs subvolume create _active
                  btrfs subvolume create _active/levol
                  btrfs subvolume create _snapshots
                  cd ..
                  umount /mnt
                  if [ $MOUNTOPTS == NULL ]; then
                    MOUNTOPTS="-o subvol=_active/levol"
                  fi
                fi
              fi
              if [ $FORMATOPTS == ext4 ]; then
                if ! mkfs.ext4 $TARGETPART; then
                  echo "mkfs.ext4 failed on $TARGETPART!"
                  FORMATERR="1"
                fi
              fi
              if [ $FORMATOPTS == vfat ]; then
                if ! mkfs.vfat $TARGETPART; then
                  echo "mkfs.vfat failed on $TARGETPART!"
                  FORMATERR="1"
                fi
              fi
            fi
            if [ ! $MOUNTOPTS == NULL ] && ([ ! $FORMATERR == 1 ] || [ ! $TPFORMAT == 1 ]); then
              echo "$MOUNTOPTS $TARGETPART /tmp/mnt/$MOUNTPOINT" >> /tmp/mountpoints.lemon
              ADDMOUNTS="1"
              echo "/tmp/mnt/$MOUNTPOINT" >> /tmp/mounts.lemon
            else
              if [ ! $FORMATERR == 1 ] || [ ! $TPFORMAT == 1 ]; then
                echo "$TARGETPART /tmp/mnt/$MOUNTPOINT" >> /tmp/mountpoints.lemon
                ADDMOUNTS="1"
                echo "/tmp/mnt/$MOUNTPOINT" >> /tmp/mounts.lemon
                echo "/tmp/mnt/$MOUNTPOINT" >> /tmp/dmounts.lemon
              fi
            fi
          fi
        fi
      done
    fi
  done
  echo "."
  echo "Formatting..."
  sleep 0.5
  if [ $USEBTRFS == 1 ]; then
    if ! mkfs.btrfs $ROOT; then
      echo "Formatting ROOT partition failed!"
      exit 1
    else
      mount $ROOT /mnt
      cd /mnt
      btrfs subvolume create _active
      btrfs subvolume create _active/rootvol
      if [ ! $USEBTRFSHOME == 1 ]; then
        btrfs subvolume create _active/homevol
      fi
      btrfs subvolume create _snapshots
      cd ..
      umount /mnt
    fi
  else
    if ! mkfs.ext4 $ROOT; then
      echo "Formatting ROOT partition failed!"
      exit 1
    fi
  fi
  if [ $BOOTMODE == 0 ]; then
    if ! mkfs.vfat $EFI; then
      echo "Formatting EFI partition failed!"
      exit 1
    fi
  fi
  if [ -z "$FORMATHOME" ]; then
    FORMATHOME="NULL"
  fi
  if [ $FORMATHOME == 1 ]; then
    if [ $USEBTRFSHOME == 1 ]; then
      if ! mkfs.btrfs $dHOME; then
        echo "Formatting HOME partition failed!"
        exit 1
      else
        mount $dHOME /mnt
        cd /mnt
        btrfs subvolume create _active
        btrfs subvolume create _active/homevol
        btrfs subvolume create _snapshots
        cd ..
        umount /mnt
      fi
    else
      if ! mkfs.ext4 $dHOME; then
        echo "Formatting HOME partition failed!"
        exit 1
      fi
    fi
  fi
  if [ $SWAPSET == 1 ]; then
    if ! mkswap $SWAP; then
      echo "Formatting SWAP partition failed!"
      exit 1
    else
      if ! swapon $SWAP; then
        echo "Failed to activate swapspace!"
        exit 1
      else
        echo "$SWAP" >> /tmp/swap.lemon
      fi
    fi
  fi
  echo "."
  echo "Mounting..."
  sleep 0.5
  mkdir /tmp/mnt/
  if [ $USEBTRFS == 1 ]; then
    if ! mount -o subvol=_active/rootvol $ROOT /tmp/mnt/; then
      echo "Failed to mount ROOT partition!"
      exit 1
    fi
    mkdir -p /tmp/mnt/mnt/defvol
    if [ ! $USEBTRFSHOME == 1 ]; then
      mkdir /tmp/mnt/home
      if ! mount -o subvol=_active/homevol $ROOT /tmp/mnt/home; then
        echo "Failed to mount ROOT partition!"
        exit 1
      fi
    fi
    if ! mount -o subvol=/ $ROOT /tmp/mnt/mnt/defvol; then
      echo "Failed to mount ROOT partition!"
      exit 1
    fi
    ROOTMOUNTED="1"
  else
    if ! mount $ROOT /tmp/mnt/; then
      echo "Failed to mount ROOT partition!"
      exit 1
    fi
    ROOTMOUNTED="1"
  fi
  if [ $BOOTMODE == 0 ]; then
    mkdir -p /tmp/mnt/boot/efi
    if ! mount $EFI /tmp/mnt/boot/efi; then
      echo "Failed to mount EFI partition!"
      exit 1
    fi
    echo "/tmp/mnt/boot/efi" >> /tmp/mounts.lemon
  else
    mkdir /tmp/mnt/boot
  fi
  if [ $HOMESET == 1 ]; then
    mkdir /tmp/mnt/home
    if [ $USEBTRFSHOME == 1 ]; then
      if ! mount -o subvol=_active/homevol $dHOME /tmp/mnt/home; then
        echo "Failed to mount HOME partition!"
        exit 1
      fi
      echo "/tmp/mnt/home" >> /tmp/mounts.lemon
    else
      if ! mount $dHOME /tmp/mnt/home; then
        echo "Failed to mount HOME partition!"
        exit 1
      fi
      echo "/tmp/mnt/home" >> /tmp/mounts.lemon
    fi
  fi
  if [ -z "$ADDMOUNTS" ]; then
    ADDMOUNTS="0"
  fi
  if [ $ADDMOUNTS == 1 ]; then
    IFS=$'\n'
    for i in $(cat /tmp/dmounts.lemon); do
      mkdir -p $i
    done
    for i in $(cat /tmp/mountpoints.lemon); do
      if ! mount $i; then
        echo "Failed to mount $i!"
        if ! isyes "Continue anyway? (Y/n)"; then
          echo "Aborting"
          exit 1
        fi
      fi
    done
    unset IFS
  fi
  if [ $ROOTMOUNTED == 1 ]; then
    echo "/tmp/mnt/" >> /tmp/mounts.lemon
  fi
}

##
## Main installation procedure
##
function INSTALL {
  echo "Installing the base system..."
  sleep 0.5
  cd /tmp/mnt/
  if [ $USEBTRFS == 1 ] || [ $USEBTRFSHOME == 1 ]; then
    if ! pacstrap . base btrfs-progs; then
      echo "pacstrap base system failed!"
      exit 1
    fi
  else
    if ! pacstrap . base; then
      echo "pacstrap base system failed!"
      exit 1
    fi
  fi
  genfstab -U /tmp/mnt >> /tmp/mnt/etc/fstab
  if [ $KEYSET == 1 ]; then
    echo "KEYMAP=$LAYOUT" >> etc/vconsole.conf
  fi
  mv etc/resolv.conf etc/resolv.conf.bak
  cp /etc/resolv.conf etc/
  mkdir etc/lemon
  cp -r $STARTDIR/${BASH_SOURCE%/*}/* etc/lemon/
  chmod 755 etc/lemon/resources/lemonaid
  mkdir hostlvm
  mount -t sysfs sys sys/
  mount -t proc proc proc/
  mount -t tmpfs tmp tmp/
  mount --rbind /dev dev/
  mount --rbind /run run/
  mount --rbind /sys/fs/cgroup sys/fs/cgroup/
  mount --bind /run/lvm hostlvm/
  if [ $BOOTMODE == 1 ]; then
    echo "GRUBDRIVE=$DRIVE" >> tmp/info.lemon
  else
    mount --bind /sys/firmware/efi/efivars sys/firmware/efi/efivars/
  fi
  echo "BOOTMODE=$BOOTMODE" >> tmp/info.lemon
  echo "Entering chroot"
  COUNT=0
  until [ $COUNT == 3 ]; do
    sleep 1
    echo "."
    COUNT=$((COUNT + 1))
  done
  chroot . /etc/lemon/resources/lemonaid
  rm -rf etc/resolv.conf
  mv etc/resolv.conf.bak etc/resolv.conf
  rm -rf etc/lemon
  echo "."
  if ! isyes "Installation complete! Reboot now? (Y/n)"; then
    exit 0
  else
    reboot
  fi
}

PREP
PARTITION
INSTALL
