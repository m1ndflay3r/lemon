#!/usr/bin/env bash

#        Lemon        #
#        V.1.2        #
#---------------------
# Maintainer: Eris Nihila (M1ndFlay3r)
#             sp0t1fyfr33tr1alabus3@outlook.com
#
#
# This software comes with absolutely NO WARRANTY, expressed or implied. Any and all use of this software is entirely
# at your own risk. By using this software you agree to release and forever discharge the developer from all manner of actions,
# cause of action, debts, accounts, bonds, contracts, claims and demands for or by any reason of damage, loss (including data loss)
# or injury to person or property that has been or may be sustained as a result of your usage of this software.
#
# This software is shipped under the GNU General Public License and is provided "as is", with no explicit or implied expectation or
# obligation to provide support, development, or otherwise unspecified services of any kind. Furthermore, the developer reserves the
# right to cease development at any time for any reason, with no obligation to provide reason(s) for cessation.
#
# This agreement covers *all* components of lemon (lemon, lemonaid, lemonlib, and lemon.conf).
#
#

echo " _                             "
echo "| |                            "
echo "| | ___ _ __ ___   ___  _ __   "
echo "| |/ _ \  _   _ \ / _ \|  _ \  "
echo "| |  __/ | | | | | (_) | | | | "
echo "|_|\___|_| |_| |_|\___/|_| |_| "
echo "                               "
echo "         By M1ndflay3r         "
echo "- - - - - - - - - - - - - - - -"

source "${BASH_SOURCE%/*}/lemon.conf"
source "${BASH_SOURCE%/*}/resources/lemonlib"
STARTDIR=$(pwd)



##
## Tests network connectivity, readies pacman, sets keyboard layout if needed, and detects whether the system is BIOS or UEFI
##
function PREP {
  if ! nettest --noretry; then
    untilnetpass '
      echo "An internet connection is required to continue.";
      echo "You will now return to the shell. When you are finished setting up your connection, type exit and the installation will resume.";
      bash --login -i
    '
  fi
  echo "Sorting mirrors..."
  if ! pacman -Sy; then
    echo "Failed to sync pacman! Check your internet settings, then restart lemon"
    exit 1
  fi
  echo "."
  if ! pacman -S --needed --noconfirm reflector &> /dev/null; then
    echo "Failed to fetch reflector! Mirrorlist will be unmodified from the one shipped with the live ISO"
    echo "Continue anyway? (Y/n)"
    if ! isyes; then
      echo "Abort"
      exit 1
    fi
  else
    reflector --latest 50 --protocol http --protocol https --sort rate --save /etc/pacman.d/mirrorlist
  fi
  echo "."
  echo "Detecting bootmode..."
  if ls -a /sys/firmware/efi/efivars &> /dev/null; then
    BOOTMODE="0"
  else
    BOOTMODE="1"
  fi
  if [ $CUSTOM_KEYMAP == 1 ]; then
    untilyes '
      ls /usr/share/kbd/keymaps/**/*.map.gz;
      sleep 0.5;
      echo "Select keyboard layout from list (eg: de-latin1):";
      unset LAYOUT;
      read LAYOUT;
      echo "You have entered $LAYOUT. is this correct? (Y/n)"
    '
    loadkeys $LAYOUT
    KEYSET="1"
  else
    KEYSET="0"
  fi
}

##
## Partitioner. This is currently kind of a mess and arguably insufficient
##
function PARTITION {
  untilyes '
    echo "Select target drive from the following.";
    sleep 0.5;
    echo ".";
    sleep 0.5;
    echo ".";
    sleep 0.5;
    fdisk -l;
    sleep 0.5;
    echo "Target drive:";
    read DRIVE;
    echo "You have entered $DRIVE. Is this correct? (Y/n)"
  '
  echo "Create EFI partition on separate physical drive from ROOT partition? (Y/n)"
  if isyes; then
    untilyes '
      fdisk -l;
      echo "Enter target drive for EFI partition:";
      read EFIPART;
      echo "You have entered $EFIPART. Is this correct? (Y/n)"
    '
    EFIDIFF="1"
  else
    EFIDIFF="0"
  fi
  echo "Create SWAP partition on separate physical drive from ROOT partition? (Y/n)"
  if isyes; then
    untilyes '
      fdisk -l;
      echo "Enter target drive for SWAP partition:";
      read SWAPPART;
      echo "You have entered $SWAPPART. Is this correct? (Y/n)"
    '
    SWAPDIFF="1"
  else
    SWAPDIFF="0"
  fi
  echo "Place /home on separate physical drive from ROOT partition? (Y/n)"
  if isyes; then
    untilyes '
      fdisk -l;
      echo "Enter target drive for HOME partition:";
      read HOMEPART;
      echo "You have entered $HOMEPART. Is this correct? (Y/n)"
    '
    HOMEDIFF="1"
  else
    HOMEDIFF="0"
  fi
  if [ $BOOTMODE == 0 ]; then
    echo "Time to partition. You MUST have an EFI and root partition. Swap space is optional."
  else
    if [ $BOOTMODE == 1 ]; then
      echo "Time to partition. You MUST have a root partition. Swap space is optional." 
    else
      echo "FATAL: Bootmode detection failed!"
      exit 1
    fi
  fi
  if [ $EFIDIFF == 1 ] || [ $SWAPDIFF == 1 ] || [ $HOMEDIFF == 1 ]; then
    echo "fdisk will now execute on $DRIVE (ROOT partition). Press enter to continue."
    read NULL
  else
    sleep 3
  fi
  untilyes '
    if ! fdisk $DRIVE; then
      echo "Failed to fdisk $DRIVE!";
      exit 1;
    fi;
    echo ".";
    fdisk -l | grep $DRIVE;
    echo ".";
    echo "Does this look right? (Y/n)"
  '
  if [ $EFIDIFF == 1 ]; then
    echo "fdisk will now execute on $EFIPART (EFI partition). Press enter to continue."
    read NULL
    untilyes '
      if ! fdisk $EFIPART; then
        echo "Failed to fdisk $EFIPART!";
        exit 1;
      fi;
      echo ".";
      fdisk -l | grep $EFIPART;
      echo ".";
      echo "Does this look right? (Y/n)"
    '
  fi
  if [ $SWAPDIFF == 1 ]; then
    echo "fdisk will now execute on $SWAPPART (SWAP partition). Press enter to continue."
    read NULL
    untilyes '
      if ! fdisk $SWAPPART; then
        echo "Failed to fdisk $SWAPPART!";
        exit 1;
      fi;
      echo ".";
      fdisk -l | grep $SWAPPART;
      echo ".";
      echo "Does this look right? (Y/n)"
    '
  fi
  if [ $HOMEDIFF == 1 ]; then
    echo "fdisk will now execute on $HOMEPART (HOME partition). Press enter to continue."
    read NULL
    untilyes '
      if ! fdisk $HOMEPART; then
        echo "Failed to fdisk $HOMEPART!";
        exit 1;
      fi;
      echo ".";
      fdisk -l | grep $HOMEPART;
      echo ".";
      echo "Does this look right? (Y/n)"
    '
  fi
  untilyes '
    unset ROOT;
    unset EFI;
    unset SWAP;
    unset dHOME;
    echo "Enter root partition:";
    read ROOT;
    if [ $BOOTMODE == 0 ]; then
      echo "Enter EFI partition:";
      read EFI;
    fi;
    echo "Enter SWAP partition (leave blank for none):";
    read SWAP;
    if [ $HOMEDIFF == 1 ]; then
      echo "Enter HOME partition:";
      read dHOME;
    fi;
    echo ".";
    sleep 0.5;
    echo ".";
    sleep 0.5;
    echo "ROOT";
    echo "----";
    echo $ROOT;
    echo " ";
    if [ $BOOTMODE == 0 ]; then
      echo "EFI";
      echo "----";
      echo $EFI;
      echo " ";
    fi;
    echo "SWAP";
    echo "----";
    echo $SWAP;
    echo " ";
    if [ $HOMEDIFF == 1 ]; then
      echo "HOME";
      echo "----";
      echo $dHOME;
      echo " ";
    fi;
    echo ".";
    echo " ";
    echo "Does this look right? (Y/n)"
  '
  echo "Formatting..."
  echo "."
  sleep 0.5
  if ! mkfs.ext4 $ROOT; then
    echo "Formatting root partition failed!"
    exit 1
  fi
  if [ $BOOTMODE == 0 ]; then
    if ! mkfs.vfat $EFI; then
      echo "Formatting EFI partition failed!"
      exit 1
    fi
  fi
  if [ $HOMEDIFF == 1 ]; then
    if ! mkfs.ext4 $dHOME; then
      echo "Formatting HOME partition failed!"
      exit 1
    fi
  fi
  if [ ! -z $SWAP ]; then
    echo "Enabling swap space..."
    if ! mkswap $SWAP; then
      echo "Formatting SWAP partition failed!"
      exit 1
    fi
    if ! swapon $SWAP; then
      echo "Failed to activate swapspace!"
      exit 1
    fi
  fi
  echo "."
  echo "Mounting..."
  sleep 0.5
  mkdir /tmp/mnt/
  if ! mount $ROOT /tmp/mnt/; then
    echo "Failed to mount ROOT partition!"
    exit 1
  fi
  if [ $BOOTMODE == 0 ]; then
    mkdir -p /tmp/mnt/boot/efi
    if ! mount $EFI /tmp/mnt/boot/efi; then
      echo "Failed to mount EFI partition!"
      exit 1
    fi
  else
    mkdir /tmp/mnt/boot
  fi
  if [ $HOMEDIFF == 1 ]; then
    mkdir -p /tmp/mnt/home
    if ! mount $dHOME /tmp/mnt/home; then
      echo "Failed to mount HOME partition!"
      exit 1
    fi
  fi
  echo "Do you have any additional partitions / mount points to set up? (Y/n)"
  if isyes; then
    echo "You will now return to the shell."
    echo "Any additional mount points need to be set up in /tmp/mnt/, NOT /mnt/."
    echo "When you are finished, type exit and lemon will resume."
    bash --login -i
  fi
}

##
## Main installation procedure
##
function INSTALL {
  echo "Installing the base system..."
  sleep 0.5
  cd /tmp/mnt/
  if ! pacstrap . base; then
    echo "pacstrap base system failed!"
    exit 1
  fi
  genfstab -U /tmp/mnt >> /tmp/mnt/etc/fstab
  if [ $KEYSET == 1 ]; then
    echo "KEYMAP=$LAYOUT" >> etc/vconsole.conf
  fi
  mv etc/resolv.conf etc/resolv.conf.bak
  cp /etc/resolv.conf etc/
  mkdir etc/lemon
  cp -r $STARTDIR/${BASH_SOURCE%/*}/* etc/lemon/
  chmod 755 etc/lemon/resources/lemonaid
  mkdir hostlvm
  mount -t sysfs sys sys/
  mount -t proc proc proc/
  mount -t tmpfs tmp tmp/
  mount --rbind /dev dev/
  mount --rbind /run run/
  mount --rbind /sys/fs/cgroup sys/fs/cgroup/
  mount --bind /run/lvm hostlvm/
  if [ $BOOTMODE == 1 ]; then
    echo "GRUBDRIVE=$DRIVE" >> tmp/info.lemon
  else
    mount --bind /sys/firmware/efi/efivars sys/firmware/efi/efivars/
  fi
  echo "BOOTMODE=$BOOTMODE" >> tmp/info.lemon
  echo "Entering chroot"
  COUNT=0
  until [ $COUNT == 3 ]; do
    sleep 1
    echo "."
    COUNT=$((COUNT + 1))
  done
  chroot . /etc/lemon/resources/lemonaid
  rm -rf etc/resolv.conf
  mv etc/resolv.conf.bak etc/resolv.conf
  rm -rf etc/lemon
  echo "."
  echo "Installation complete! Reboot now? (Y/n)"
  if ! isyes; then
    exit 0
  else
    reboot
  fi
}

PREP
PARTITION
INSTALL
